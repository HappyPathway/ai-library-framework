[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ailf"
version = "0.1.0"
description = "AI Liberation Front: Freedom tools for AI agent development"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "AI Liberation Front Team", email = "ailf@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic>=2.7.2",
    "python-dotenv>=1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/ai-liberation-front/ailf"
"Bug Tracker" = "https://github.com/ai-liberation-front/ailf/issues"
"Documentation" = "https://ailf.readthedocs.io/"
"Source" = "https://github.com/ai-liberation-front/ailf"

[project.optional-dependencies]
ai = [
    "anthropic>=0.50.0",
    "openai>=1.77.0",
    "google-generativeai>=0.8.5",
    "pydantic-ai>=0.1.9",
]
mcp = [
    "mcp>=1.7.1",
    "fastapi>=0.95.1",
    "sse-starlette>=1.6.1",
    "uvicorn>=0.23.1",
]
cloud = [
    "google-cloud-storage>=2.14.0",
    "google-cloud-secret-manager>=2.23.3",
]
zmq = [
    "pyzmq>=25.1.2",
]
redis = [
    "redis>=5.0.1",
    "async-timeout>=4.0.3",
]
test = [
    "pytest>=8.1.1",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
]
dev = [
    "black>=24.3.0",
    "flake8>=7.0.0",
    "mypy>=1.9.0",
    "isort>=5.13.2",
    "pytest>=8.1.1",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
]
agent = [
    "anthropic>=0.50.0",
    "openai>=1.77.0",
    "google-generativeai>=0.8.5",
    "pydantic-ai>=0.1.9",
    "mcp>=1.7.1",
    "fastapi>=0.95.1",
    "sse-starlette>=1.6.1",
    "uvicorn>=0.23.1",
]
all = [
    "anthropic>=0.50.0",
    "openai>=1.77.0",
    "google-generativeai>=0.8.5",
    "pydantic-ai>=0.1.9",
    "mcp>=1.7.1",
    "fastapi>=0.95.1",
    "sse-starlette>=1.6.1",
    "uvicorn>=0.23.1",
    "google-cloud-storage>=2.14.0",
    "google-cloud-secret-manager>=2.23.3",
    "pyzmq>=25.1.2",
    "redis>=5.0.1",
    "async-timeout>=4.0.3",
]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100

[tool.pylint.messages_control]
disable = [
    "unused-import",
    "unused-wildcard-import",
    "wildcard-import",
    "wrong-import-position", 
    "wrong-import-order",
    "fixme",
    "line-too-long",
]

[tool.flake8]
ignore = ["F401", "E501"]
max-line-length = 100
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
]

[tool.pyright]
reportUnusedImport = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "integration: marks tests as integration tests that require external services",
    "unit: marks tests as unit tests that can run independently",
    "slow: marks tests as slow running tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:redis.*:",
    "ignore::_pytest.warning_types.PytestUnhandledThreadExceptionWarning",
]
