name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      # Set up Redis service for integration tests
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Install package in development mode
      run: |
        pip install -e .
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 utils tests examples --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Register pytest marks
      run: |
        echo "[tool.pytest.ini_options]
        markers = [
            \"integration: marks tests that require external services\",
            \"unit: marks unit tests\"
        ]" >> pyproject.toml
        
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov pytest-timeout
        # Run unit tests first
        pytest tests/utils --cov=utils
        
    - name: Run integration tests
      env:
        # Make sure Redis connection details are properly set for CI environment
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        # Set a flag to use mock Redis as fallback if real Redis connection fails
        USE_MOCK_REDIS_FALLBACK: true
      run: |
        # Wait for Redis to be ready
        sleep 5
        echo "Testing Redis connection..."
        if ! redis-cli -h localhost -p 6379 ping; then
          echo "Redis not available, will use mock Redis implementation"
          export USE_MOCK_REDIS=true
        fi
        
        # Run integration tests with timeout to prevent hanging
        pytest tests/integration --cov=utils --cov-append --timeout=30
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
