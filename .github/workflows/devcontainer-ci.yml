name: DevContainer CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check Docker Status
      run: |
        echo "=== Docker System Info ==="
        docker info
        docker version
        echo "=== Docker Disk Space ==="
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and run dev container
      uses: devcontainers/ci@v0.3
      with:
        imageName: ghcr.io/happypathway/template-python-dev
        # Add these important options to make the container more reliable
        cacheFrom: ghcr.io/happypathway/template-python-dev
        push: never
        subFolder: .
        skipContainerUserIdUpdate: false
        runCmd: |
          # Verbose error handling with better reporting
          set -e
          set -o pipefail
          
          # Echo each command before running it
          set -x
          
          # Create some required files for the devcontainer
          echo "=== Creating Setup Files ==="
          touch .env || true
          mkdir -p ~/.config/gcloud || true
          mkdir -p ~/.ssh || true
          
          # Verify the environment
          echo "=== Environment Check ==="
          python --version
          pip list
          echo "=== System Resources ==="
          df -h
          free -m
          
          # Install the package in development mode
          echo "=== Installing package ==="
          pip install -e . || { echo "Package installation failed"; exit 1; }
          
          # Start Redis server using our improved script
          echo "=== Setting up Redis ==="
          if [ -f ".devcontainer/start-redis.sh" ]; then
            sudo -E bash .devcontainer/start-redis.sh || echo "WARNING: Redis setup failed"
          else
            echo "Redis script not found, using fallback method"
            # Fallback Redis setup
            if command -v redis-server >/dev/null 2>&1; then
              echo "Starting Redis with direct command..."
              redis-server --daemonize yes || true
              sleep 2
            else
              echo "Redis server command not found"
              export SKIP_REDIS_TESTS=1
            fi
          fi
          
          # Check if Redis is running properly
          echo "=== Checking Redis Connection ==="
          if redis-cli ping 2>/dev/null | grep -q "PONG"; then
            echo "Redis is responding correctly"
          else
            echo "Redis is not responding properly"
            echo "Continuing with limited testing without Redis"
            export SKIP_REDIS_TESTS=1
          fi
          
          # Run tests with conditional Redis tests
          echo "=== Running Unit Tests ==="
          if [ "${SKIP_REDIS_TESTS:-0}" -eq 1 ]; then
            echo "Running tests without Redis-dependent tests"
            pytest tests/utils --cov=utils -k "not redis"
          else
            pytest tests/utils --cov=utils
          fi
          
          echo "=== Running Integration Tests ==="
          if [ "${SKIP_REDIS_TESTS:-0}" -eq 1 ]; then
            echo "Running integration tests without Redis-dependent tests"
            pytest tests/integration --cov=utils --cov-append --timeout=30 -k "not redis"
          else
            pytest tests/integration --cov=utils --cov-append --timeout=30
          fi
          
          # Generate and show coverage report
          echo "=== Coverage Report ==="
          python -m coverage report
