name: DevContainer with Redis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  test-with-devcontainer:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Start Redis in GitHub Actions
      run: |
        docker run --name redis -p 6379:6379 -d redis:latest
        # Wait for Redis to start
        sleep 5
        # Check if Redis is running
        docker exec redis redis-cli ping

    - name: Build and run dev container
      uses: devcontainers/ci@v0.3
      env:
        # Pass the environment to the dev container
        REDIS_HOST: host.docker.internal # Special hostname to access host from inside devcontainer
        REDIS_PORT: 6379
        USE_MOCK_REDIS_FALLBACK: "true"
      with:
        imageName: ghcr.io/happypathway/template-python-dev
        # Extra args to enable accessing host from devcontainer
        runCmd: |
          # Update /etc/hosts to ensure host.docker.internal works
          echo -e "`/sbin/ip route | awk '/default/ { print $3 }'`\thost.docker.internal" | sudo tee -a /etc/hosts
          
          # Verify the environment
          echo "=== Environment Check ==="
          python --version
          pip list
          
          # Install the package in development mode
          pip install -e .
          
          # Check Redis connectivity
          ./setup/check_redis.sh
          
          # Run tests (first the basic unit tests)
          pytest tests/utils --cov=utils
          
          # Run the Redis integration tests
          pytest tests/integration/utils/test_redis.py -v --cov=utils --cov-append

  test-with-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        redis: ['real', 'mock']
    
    services:
      # Set up Redis service for the 'real' case
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Only start Redis for the 'real' test case
        if: ${{ matrix.redis == 'real' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    # Set the USE_MOCK_REDIS env var for the 'mock' case
    - name: Configure mock Redis
      if: ${{ matrix.redis == 'mock' }}
      run: echo "USE_MOCK_REDIS=true" >> $GITHUB_ENV
    
    - name: Run Redis tests
      run: |
        if [ "${{ matrix.redis }}" == "mock" ]; then
          echo "Running tests with mock Redis implementation"
        else
          echo "Running tests with real Redis"
          # Wait for Redis to be ready
          sleep 5
        fi
        
        pytest tests/integration/utils/test_redis.py -v
